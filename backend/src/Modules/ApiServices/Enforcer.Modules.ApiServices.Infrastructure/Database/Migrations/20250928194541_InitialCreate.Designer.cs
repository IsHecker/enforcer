// <auto-generated />
using System;
using Enforcer.Modules.ApiServices.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Enforcer.Modules.ApiServices.Infrastructure.Database.Migrations
{
    [DbContext(typeof(ApiServicesDbContext))]
    [Migration("20250928194541_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("ApiServices")
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Enforcer.Modules.ApiServices.Domain.ApiServices.ApiService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApiDocId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ServiceKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubscriptionsCount")
                        .HasColumnType("int");

                    b.Property<string>("TargetBaseUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApiDocId")
                        .IsUnique()
                        .HasFilter("[ApiDocId] IS NOT NULL");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ServiceKey")
                        .IsUnique();

                    b.ToTable("ApiServices", "ApiServices");
                });

            modelBuilder.Entity("Enforcer.Modules.ApiServices.Domain.ApiServices.Endpoint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApiServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HTTPMethod")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("PlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PublicPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("RateLimit")
                        .HasColumnType("int");

                    b.Property<string>("RateLimitWindow")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TargetPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApiServiceId");

                    b.HasIndex("PlanId");

                    b.HasIndex("HTTPMethod", "PublicPath")
                        .IsUnique()
                        .HasFilter("[HTTPMethod] IS NOT NULL");

                    b.ToTable("Endpoints", "ApiServices");
                });

            modelBuilder.Entity("Enforcer.Modules.ApiServices.Domain.ApiServices.OpenApiDocumentation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Documentation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OpenApiDocumentations", "ApiServices");
                });

            modelBuilder.Entity("Enforcer.Modules.ApiServices.Domain.Subscriptions.Plan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApiServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BillingPeriod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FeaturesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("MaxOverage")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OveragePrice")
                        .HasColumnType("int");

                    b.Property<int?>("Price")
                        .HasColumnType("int");

                    b.Property<int>("QuotaLimit")
                        .HasColumnType("int");

                    b.Property<string>("QuotaResetPeriod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RateLimit")
                        .HasColumnType("int");

                    b.Property<string>("RateLimitWindow")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubscriptionsCount")
                        .HasColumnType("int");

                    b.Property<int>("TierLevel")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FeaturesId")
                        .IsUnique();

                    b.HasIndex("ApiServiceId", "TierLevel")
                        .IsUnique();

                    b.ToTable("Plans", "ApiServices");
                });

            modelBuilder.Entity("Enforcer.Modules.ApiServices.Domain.Subscriptions.PlanFeature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PlanFeatures", "ApiServices");
                });

            modelBuilder.Entity("Enforcer.Modules.ApiServices.Domain.Subscriptions.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApiKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("ApiServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConsumerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("bit");

                    b.Property<Guid>("PlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SubscribedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("ApiServiceId");

                    b.HasIndex("PlanId");

                    b.HasIndex("ConsumerId", "PlanId")
                        .IsUnique();

                    b.ToTable("Subscriptions", "ApiServices");
                });

            modelBuilder.Entity("Enforcer.Modules.ApiServices.Domain.ApiServices.ApiService", b =>
                {
                    b.HasOne("Enforcer.Modules.ApiServices.Domain.ApiServices.OpenApiDocumentation", null)
                        .WithOne()
                        .HasForeignKey("Enforcer.Modules.ApiServices.Domain.ApiServices.ApiService", "ApiDocId");
                });

            modelBuilder.Entity("Enforcer.Modules.ApiServices.Domain.ApiServices.Endpoint", b =>
                {
                    b.HasOne("Enforcer.Modules.ApiServices.Domain.ApiServices.ApiService", null)
                        .WithMany()
                        .HasForeignKey("ApiServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Enforcer.Modules.ApiServices.Domain.Subscriptions.Plan", null)
                        .WithMany()
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Enforcer.Modules.ApiServices.Domain.Subscriptions.Plan", b =>
                {
                    b.HasOne("Enforcer.Modules.ApiServices.Domain.ApiServices.ApiService", null)
                        .WithMany()
                        .HasForeignKey("ApiServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Enforcer.Modules.ApiServices.Domain.Subscriptions.PlanFeature", "Features")
                        .WithOne()
                        .HasForeignKey("Enforcer.Modules.ApiServices.Domain.Subscriptions.Plan", "FeaturesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Features");
                });

            modelBuilder.Entity("Enforcer.Modules.ApiServices.Domain.Subscriptions.Subscription", b =>
                {
                    b.HasOne("Enforcer.Modules.ApiServices.Domain.ApiServices.ApiService", null)
                        .WithMany()
                        .HasForeignKey("ApiServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Enforcer.Modules.ApiServices.Domain.Subscriptions.Plan", "Plan")
                        .WithMany()
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Plan");
                });
#pragma warning restore 612, 618
        }
    }
}
